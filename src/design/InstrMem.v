`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:  
// Engineer: Kirby Burke
// 
// Create Date: 11/13/2024 10:05:39 PM
// Design Name: Instruction Memory
// Module Name: InstrMem
// Project Name: Pipelined MIPS32 Processor
// Target Devices: xc7a35ticpg236-1L
// Tool Versions: Vivado v2023.2 (64-bit)
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module InstrMem(
    input [9:0] read_addr,
    output [31:0] data
    );
    
    reg [31:0]rom[255:0];  
    
    initial begin  

		//----------------------------------------------------------------------------------------------------------------------//		
		//        Instruction                              Assembly               ALU Out      Memory           Register        //
		//----------------------------------------------------------------------------------------------------------------------//

		/** Load values into first 10 registers **/

		rom[0]  = 32'b10001100000000010000000000000000; // lw  $1,  0($0)         00000000     $1 = 00000001    -
		rom[1]  = 32'b10001100000000100000000000000100; // lw  $2,  4($0)         00000001     $2 = 0fd76e10    -
		rom[2]  = 32'b10001100000000110000000000000100; // lw  $3,  8($0)         00000002     $3 = 0fd76e10    -
		rom[3]  = 32'b10001100000001000000000000001100; // lw  $4, 12($0)         00000003     $4 = 14333ffc    -
		rom[4]  = 32'b10001100000001010000000000010000; // lw  $5, 16($0)         00000004     $5 = 321fedcb    -
		rom[5]  = 32'b10001100000001100000000000010100; // lw  $6, 20($0)         00000005     $6 = 80000000    -
		rom[6]  = 32'b10001100000001110000000000011000; // lw  $7, 24($0)         00000006     $7 = 9012fd65    -
		rom[7]  = 32'b10001100000010000000000000011100; // lw  $8, 28($0)         00000007     $8 = abc00237    -
		rom[8]  = 32'b10001100000010010000000000100000; // lw  $9, 32($0)         00000008     $9 = b54bc031    -
		rom[9]  = 32'b10001100000010100000000000100100; // lw $10, 36($0)         00000009    $10 = c187a606    -


		/** Tests with No Hazards **/

		rom[10] = 32'b00110000011010111111111101100011; // andi $11, $3, #ff63    0fd76e00    $11 = 0fd76e00    -
		rom[11] = 32'b00000000001000100110000000100111; // nor  $12, $1, $2       f02891ee    $12 = f02891ee    - 
		rom[12] = 32'b00000000001000100110100000101010; // slt  $13, $1, $2       00000001    $13 = 00000001    -
		rom[13] = 32'b11000000010000000111000011000000; // sll  $14, $2, #3       7ebb7080    $14 = 7ebb7080    -
		rom[14] = 32'b11000000001000000111100101000010; // srl  $15, $1, #5       00000000    $15 = 00000000    -
		rom[15] = 32'b11000000110000001000000110000011; // sra  $16, $6, #6       fe000000    $16 = fe000000    -
		rom[16] = 32'b00000000010000111000100000100110; // xor  $17, $2, $3       00000000    $17 = 00000000    -
		rom[17] = 32'b00000000001000101001000000011000; // mult $17, $1, $2       0fd76e10    $18 = 0fd76e10    -
		rom[18] = 32'b00000000010000011001100000011010; // div  $19, $2, $1       0fd76e10    $19 = 0fd76e10    -

		rom[19] = 32'b10101100000010110000000000101100; // sw $11, 11($0)         0000002c    -                 mem[11] = 0fd76e00
		rom[20] = 32'b10101100000011000000000000110000; // sw $12, 12($0)         00000030    -                 mem[12] = f02891ee
		rom[21] = 32'b10101100000011010000000000110100; // sw $13, 13($0)         00000034    -                 mem[13] = 00000001
		rom[22] = 32'b10101100000011100000000000111000; // sw $14, 14($0)         00000038    -                 mem[14] = 7ebb7080
		rom[23] = 32'b10101100000011110000000000111100; // sw $15, 15($0)         0000003c    -                 mem[15] = 00000000
		rom[24] = 32'b10101100000100000000000001000000; // sw $16, 16($0)         00000040    -                 mem[16] = fe000000
		rom[25] = 32'b10101100000100010000000001000100; // sw $17, 17($0)         00000044    -                 mem[17] = 00000000
		rom[26] = 32'b10101100000100100000000001001000; // sw $18, 18($0)         00000048    -                 mem[18] = 0fd76e10
		rom[27] = 32'b10101100000100110000000001001100; // sw $19, 19($0)         0000004c    -                 mem[19] = 0fd76e10


		/** Data Hazard Tests: Forwarding **/

		rom[28] = 32'b00110000111010110000111101100011; // andi $11,  $7, #f63    00000d61    $11 = 00000d61    -
		rom[29] = 32'b00000000010010110110000000100111; // nor  $12,  $2,  $11    f028908e    $12 = f028908e    -
		rom[30] = 32'b00000001011000100110100000101010; // slt  $13, $11,   $2    00000001    $13 = 00000001    -
		rom[31] = 32'b11000000111000000111001101000000; // sll  $14,  $2,  #13    5faca000    $14 = 5faca000    -
		rom[32] = 32'b11000001110000000111100111000010; // srl  $15, $14,   #7    00bf5940‬    $15 = 00bf5940    -
		rom[33] = 32'b11000001110000001000000010000011; // sra  $16, $14,   #2    17eb2800‬    $16 = 17eb2800‬    -    
		rom[34] = 32'b00000000010001111000100000100110; // xor  $17,  $2,   $7    9fc59375    $17 = 9fc59375    -
		rom[35] = 32'b00000000010001111001000000011000; // mult $18,  $2,   $7    e4e43c50    $18 = e4e43c50    -
		rom[36] = 32'b00000000111100011001100000011010; // div  $19,  $7,  $17    00000000    $19 = 00000000    -

		rom[37] = 32'b10101100000010110000000001010000; // sw $11, 20($0)         00000050    -                 mem[20] = 00000d61 
		rom[38] = 32'b10101100000011000000000001010100; // sw $12, 21($0)         00000054    -                 mem[21] = f028908e 
		rom[39] = 32'b10101100000011010000000001011000; // sw $13, 22($0)         00000058    -                 mem[22] = 00000001        
		rom[40] = 32'b10101100000011100000000001011100; // sw $14, 23($0)         0000005c    -                 mem[23] = 5faca000 
		rom[41] = 32'b10101100000011110000000001100000; // sw $15, 24($0)         00000060    -                 mem[24] = 00bf5940 
		rom[42] = 32'b10101100000100000000000001100100; // sw $16, 25($0)         00000064    -                 mem[25] = 17eb2800 
		rom[43] = 32'b10101100000100010000000001101000; // sw $17, 26($0)         00000068    -                 mem[26] = 9fc59375 
		rom[44] = 32'b10101100000100100000000001101100; // sw $18, 27($0)         0000006c    -                 mem[27] = e4e43c50
		rom[45] = 32'b10101100000100110000000001110000; // sw $19, 28($0)         00000070    -                 mem[28] = 00000000 


		/** Data Hazard Tests: Stalling **/

		rom[46] = 32'b10001100000010110000000000100100; // lw  $11, 36($0)        00000009    $11 = c187a606    -
		rom[47] = 32'b00000001011000100110000000100000; // add $12, $11, $2       d15f1416    $12 = d15f1416    -

		rom[48] = 32'b10001100000011010000000000100000; // lw  $13, 32($0)        00000009    $13 = b54bc031    -
		rom[49] = 32'b00000000001011010111000000100000; // add $14, $1, $13       b54bc032    $14 = b54bc032    -

		rom[50] = 32'b10101100000011000000000001110100; // sw $12, 29($0)         00000074    -                 mem[29] = d15f1416
		rom[51] = 32'b10101100000011100000000001111000; // sw $14, 30($0)         00000078    -                 mem[30] = b54bc032


		/** Control Hazard Test: Branch **/

		// Branch to rom[56]
		rom[52] = 32'b00010000010000110000000000000011; // beq  $2, $3, #3        00000000    -
		rom[53] = 32'b00000000001000100101000000100000; // add $10, $1, $2        0fd76e11    $10 = 0fd76e11    -
		rom[54] = 32'b00000000001001000101000000100000; // add $10, $1, $4        14333ffd    $10 = 14333ffd    -
		rom[55] = 32'b00000000001001010101000000100000; // add $10, $1, $5        321fedcc    $10 = 321fedcc    -

		rom[56] = 32'b10101100000010100000000001111100; // sw $10, 31($0)         0000007c    -                 mem[31] = c187a606


		/** Control Hazard Test: Jump **/

		// Jump to rom[64]    
		rom[57] = 32'b00001000000000000000000001000000; // j #40                  -
		rom[58] = 32'b00000000001000100100100000100000; // add $9, $1, $2         0fd76e11    $9 = 0fd76e11     -
		rom[59] = 32'b00000000001001000100100000100000; // add $9, $1, $4         14333ffd    $9 = 14333ffd     -
		rom[60] = 32'b00000000001001010100100000100000; // add $9, $1, $5         321fedcc    $9 = 321fedcc     -
		rom[61] = 32'b00000000001001100100100000100000; // add $9, $1, $6         80000001    $9 = 80000001     -
		rom[62] = 32'b00000000001001110100100000100000; // add $9, $1, $7         9012fd66    $9 = 9012fd66     -
		rom[63] = 32'b00000000001010000100100000100000; // add $9, $1, $8         abc00238    $9 = abc00238     -

		rom[64] = 32'b10101100000010010000000010000000; // sw $9, 32($0)          00000080    -                 mem[32] = b54bc031

    end                                                                                                  

    assign data = rom[read_addr[9:2]];                                                                   

endmodule
